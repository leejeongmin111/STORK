import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
import pytesseract
import re


# 텍스트 속에있는 AC,HC,FL,CRL 정보 추출

def acprint(text):
  regex = re.compile(r'AC\d+[.]\d+cm')
  matchobj = regex.search(text)
  if matchobj != None:
    AC = matchobj.group()
    AC = AC.replace("AC","")
    AC = AC.replace("cm","")
    print("AC : " + AC)
    AC = float(AC)
    return AC

def hcprint(text):
  regex = re.compile(r'HC\d+[.]\d+cm')
  matchobj = regex.search(text)
  if matchobj != None:
    HC = matchobj.group()
    HC = HC.replace("HC","")
    HC = HC.replace("cm","")
    print("HC : " + HC)
    HC = float(HC)
    return HC

def flprint(text):
  regex = re.compile(r'FL\d+[.]\d+cm')
  matchobj = regex.search(text)
  if matchobj != None:
    FL = matchobj.group()
    FL = FL.replace("FL","")
    FL = FL.replace("cm","")
    print("FL : " + FL)
    FL = float(FL)
    return FL

def crlprint(text):
  regex = re.compile(r'BPD\d+[.]\d+cm')
  matchobj = regex.search(text)
  if matchobj != None:
    CRL = matchobj.group()
    CRL = CRL.replace("BPD","")
    CRL = CRL.replace("cm","")
    print("BPD : " + CRL)
    CRL = float(CRL)
    print(CRL)
    return CRL

def allprint(text):
  acprint(text)
  hcprint(text)
  flprint(text)
  crlprint(text)


#비교데이터
normal = [0.0000,0.0398,0.0793,0.1179,0.1554,0.0040,0.0438,0.0832,0.1217,0.1591,0.0080,0.0478,0.0871,0.1255,0.1628,0.0120,0.0517,0.0910,0.1293,0.1664,0.0160,0.0557,0.0948,0.1331,
          0.1700,0.0199,0.0596,0.0987,0.1368,0.1736,0.0239,0.0636,0.1026,0.1406,0.1772,0.0279,0.0675,0.1064,0.1443,0.1808,0.0319,0.0714,0.1103,0.1480,0.1844,0.0359,0.0753,0.1141,0.1517,
          0.1879,0.1915,0.2257,0.2580,0.2881,0.3159,0.1950,0.2291,0.2611,0.2910,0.3186,0.1985,0.2324,0.2642,0.2939,0.3212,0.2019,0.2357,0.2673,0.2967,0.3238,0.2054,0.2389,0.2704,0.2995,
          0.3264,0.2088,0.2422,0.2734,0.3023,0.3289,0.2123,0.2454,0.2764,0.3051,0.3315,0.2157,0.2486,0.2794,0.3078,0.3340,0.2190,0.2517,0.2823,0.3106,0.3365,0.2224,0.2549,0.2852,0.3133,
          0.3389,0.3413,0.3643,0.3849,0.4032,0.4192,0.3438,0.3665,0.3869,0.4049,0.4207,0.3461,0.3686,0.3888,0.4066,0.4222,0.3485,0.3708,0.3907,0.4082,0.4236,0.3508,0.3729,0.3925,0.4099,
          0.4251,0.3531,0.3749,0.3944,0.4115,0.4265,0.3554,0.3770,0.3962,0.4131,0.4279,0.3577,0.3790,0.3980,0.4147,0.4292,0.3599,0.3810,0.3997,0.4162,0.4306,0.3621,0.3830,0.4015,0.4177,
          0.4319,0.4332,0.4452,0.4554,0.4641,0.4713,0.4345,0.4463,0.4564,0.4649,0.4719,0.4357,0.4474,0.4573,0.4656,0.4726,0.4370,0.4484,0.4582,0.4664,0.4732,0.4382,0.4495,0.4591,0.4671,
          0.4738,0.4394,0.4505,0.4599,0.4678,0.4744,0.4406,0.4515,0.4608,0.4686,0.4750,0.4418,0.4525,0.4616,0.4693,0.4756,0.4429,0.4535,0.4625,0.4699,0.4761,0.4441,0.4545,0.4633,0.4706,
          0.4767,0.4772,0.4821,0.4861,0.4893,0.4918,0.4778,0.4826,0.4864,0.4896,0.4920,0.4783,0.4830,0.4868,0.4898,0.4922,0.4788,0.4834,0.4871,0.4901,0.4925,0.4793,0.4838,0.4875,0.4904,
          0.4927,0.4798,0.4842,0.4878,0.4906,0.4929,0.4803,0.4846,0.4881,0.4909,0.4931,0.4808,0.4850,0.4884,0.4911,0.4932,0.4812,0.4854,0.4887,0.4913,0.4934,0.4817,0.4857,0.4890,0.4916,
          0.4936,0.4938,0.4953,0.4965,0.4974,0.4981,0.4940,0.4955,0.4966,0.4975,0.4982,0.4941,0.4956,0.4967,0.4976,0.4982,0.4943,0.4957,0.4968,0.4977,0.4983,0.4945,0.4959,0.4969,0.4977,
          0.4984,0.4946,0.4960,0.4970,0.4978,0.4984,0.4948,0.4961,0.4971,0.4979,0.4985,0.4949,0.4962,0.4972,0.4979,0.4985,0.4951,0.4963,0.4973,0.4980,0.4986,0.4952,0.4964,0.4974,0.4981,
          0.4986,0.4987,0.4990,0.4993,0.4995,0.4997,0.4987,0.4991,0.4993,0.4995,0.4997,0.4987,0.4991,0.4994,0.4995,0.4997,0.4988,0.4991,0.4994,0.4996,0.4997,0.4988,0.4992,0.4994,0.4996,
          0.4997,0.4989,0.4992,0.4994,0.4996,0.4997,0.4989,0.4992,0.4994,0.4996,0.4997,0.4989,0.4992,0.4995,0.4996,0.4997,0.4990,0.4993,0.4995,0.4996,0.4997,0.4990,0.4993,0.4995,0.4997,0.4998]
normal.sort()

flmean = [1.77,2.03,2.34,2.71,2.99,3.39,3.67,3.91,4.07,4.24,4.42,4.62,5.01,5.37,5.56,5.72,5.9,6.01,6.14,6.34,6.46,6.37,6.71,6.79]
flsd = [0.06,0.15,0.27,0.22,0.23,0.01,0.05,0.08,0.12,0.26,0.38,0.34,0.08,0.34,0.36,0.26,0.06,0.04,0.26,0.28,0.26,0.86,0.81,0.69]

acmean = [9.81,11.05,11.91,13.06,14.40,15.38,16.29,17.37,18.48,19.53,20.16,21.50,22.59,23.63,24.60,25.76,26.47,27.44,28.42,28.82,29.78,30.02,31.40,31.27]
acsd = [0.11,0.19,0.16,0.21,0.09,0.13,0.12,0.11,0.09,0.13,0.14,0.16,0.09,0.11,0.03,0.30,0.03,0.05,0.12,0.19,0.24,0.64,0.57,0.91]

crlmean = [3.31,3.58,3.93,4.32,4.60,4.87,5.18,5.49,5.71,6.07,6.33,6.71,7.00,7.26,7.38,7.72,8.10,8.20,8.48,8.51,8.71,8.87,8.89,9.07]
crlsd =[0.05,0.06,0.11,0.05,0.17,0.35,0.22,0.22,0.30,0.11,0.15,0.10,0.13,0.11,0.15,0.10,0.33,0.14,0.77,0.27,0.06,0.45,0.81,0.99]



age = [15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]

#퍼센트 나타내주는 함수
def flpercent(week, FL):
  global resultpersent
  cnt = 0
  for a in age:
    if a == week:
      agenum = cnt
    cnt+=1
  Z = (FL - flmean[agenum])/flsd[agenum]
  z=abs(Z)
  z=z*100//1
  if Z>0:
    resultpersent = normal[int(z)] + 0.5
  else:
    resultpersent = normal[int(z)]
  resultpersent = int(resultpersent*100//1)
  return resultpersent



def acpercent(week, AC):
  global resultpersent
  cnt = 0
  for a in age:
    if a == week:
      agenum = cnt
    cnt+=1
  Z = (AC - acmean[agenum])/acsd[agenum]
  z=abs(Z)
  z=z*100//1
  if Z>0:
    resultpersent = normal[int(z)] + 0.5
  else:
    resultpersent = normal[int(z)]
  resultpersent = int(resultpersent*100//1)
  return resultpersent


def hcpercent(week, HC):
  global resultpersent
  cnt = 0
  for a in age:
    if a == week:
      agenum = cnt
    cnt+=1
  Z = (HC - flmean[agenum])/flsd[agenum]
  z=abs(Z)
  z=z*100//1
  if Z>0:
    resultpersent = normal[int(z)] + 0.5
  else:
    resultpersent = normal[int(z)]
  resultpersent = int(resultpersent*100//1)
  return resultpersent



#ocr된 데이터 처리
def ocrtext(text):
  string_text = text.replace('\n',"")
  string_text = string_text.replace('-',"")
  string_text = string_text.replace(' ',"")
  # string_text = re.sub(r'[^0-9a-zA-Z]','',text)
  string_text = str(string_text)
  return string_text